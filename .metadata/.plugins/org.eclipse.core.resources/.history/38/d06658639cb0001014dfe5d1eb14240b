package com.smhrd.frontcontroller;

import java.io.IOException;
import java.util.HashMap;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.ibatis.annotations.Select;

import com.smhrd.controller.JoinService;
import com.smhrd.controller.LoginService;
import com.smhrd.controller.LogoutService;
import com.smhrd.controller.SelectAllService;

// 모든 요청이 .do라고 하는 확장자를 가지고 있다면
// 다 가져올 수 있는 URL Mapping 
@WebServlet("*.do")
public class FrontController extends HttpServlet {

   // FrontController : 단 한개의 Servlet을 사용하여, 모든 요청과 응답을 처리하는 패턴!

   private static final long serialVersionUID = 1L;
   HashMap<String , Command> map;
   
   
   
   
   
   
   @Override
public void init(ServletConfig config) throws ServletException {
	
	   map = new HashMap<String, Command>();
	   
	   map.put("Join.do", new JoinService());
	   map.put("Login.do", new LoginService());
	   map.put("Loguout.do", new LogoutService());
	   map.put("SelectALL.do", new SelectAllService());
	   
}






protected void service(HttpServletRequest request, HttpServletResponse response)
         throws ServletException, IOException {

	   
	   
      // 1. FrontController에 들어온 요청이 어떤 요청인지 파악

      // 실행되는 uri 주소 가져오기
      String uri = request.getRequestURI();
      System.out.println(uri);

      // 프로젝트 경로 가져오기
      String path = request.getContextPath();
      System.out.println(path);

      // uri 경로에서 path에 대한 경로를 삭제
      // /MeesageSystem_FrontCon + /
      // -> /Login.do

      // uri-path를 할건데 uri 에서 substring 기능을 활용해서path.length +1만큼 빼서 Login.do 빼올거임
      String finalUri = uri.substring(path.length() + 1);
      System.out.println(finalUri);

      // 중복 되는 코드들을 한번에 처리
      // 요청 객체에 대한 인코딩 작업!
      request.setCharacterEncoding("UTF-8");
      String moveUrl = "";
      Command com = null;

      // Command로 업캐스팅 시켜 반복작업을 간소화 시킴

      
      if(finalUri.contains("Go")) {
    	  // ex) Gomain.do
    	  // main.jsp 파일로 forward 방식 이
    	  // 최종적으로 이동해야하는 경로를 만들어주는 작업
    	moveUrl =  finalUri.substring(2).replaceAll("do", "jsp");
      } else {
    	  com = map.get(finalUri);
          moveUrl = com.execute(request, response);
       }
       if (moveUrl.contains("redirect:/"))

       {
          // redirect:/main.jsp --> redirect 방식 이동
          // moveUrl --> redirect:/ 잘라줘야 이동할 경로가 제대로 나온다!
          response.sendRedirect(moveUrl.substring(10));
      } else {
         // 1. join_success.jsp --> forward 방식 이동
         RequestDispatcher rd = request.getRequestDispatcher("WEB-INF/"+moveUrl);
         rd.forward(request, response);
      }

   }

}
