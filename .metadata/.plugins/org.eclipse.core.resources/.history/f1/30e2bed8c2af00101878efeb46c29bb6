package com.smhrd.frontcontroller;

import java.io.IOException;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import com.smhrd.model.MemberDAO;
import com.smhrd.model.MemberVO;

// 모든 요청이 .do 라고 하는 확장자를 가지고 있다면
// 다 가져올수 있는 URL Mapping

@WebServlet("*.do")
public class FrontController extends HttpServlet {
   
   // FrontController : 단 한개의 Servlet을 사용하여,
   // 모든 요청과 응답을 처리하는 패턴!
   
   private static final long serialVersionUID = 1L;

   
   protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
      
      // 1. FrontController에 들어온 요청이 어떤 요청인지 파악!
      
      // 실행되는 uri 주소 가져오기
      String uri = request.getRequestURI();
      System.out.println("uri : >>" + uri);
      
      //프로젝트 경로 가져오기
      String path = request.getContextPath();
      System.out.println("path : " + path);
      
      // uri 경로에서 path 에 대한 경로 삭제!
      // => /Login.do
   // uri-path를 할건데 uri 에서 substring 기능을 활용해서path.length +1만큼 빼서 Login.do 빼올거임
      String finalUri = uri.substring(path.length() + 1);
      System.out.println(finalUri);

      // 요청별에 따른 기능 연결
      if (finalUri.equals("Join.do")) {
         // 회원가입에 대한 기능 수행
         // 회원의 정보를 입력받아 DB에 저장해주기 위한 기능을 연결하는 Service!

         // 1. 요청 객체에 대한 인코딩 작업!
         request.setCharacterEncoding("UTF-8");

         // 2. 요청 객체로 부터 데이터 꺼내오기!
         String email = request.getParameter("email");
         String pw = request.getParameter("pw");
         String tel = request.getParameter("tel");
         String address = request.getParameter("address");

         // 데이터 확인용 → 출력문!
         // System.out.println(email +"/"+pw+"/"+tel+"/"+address);

         // DB에 전달해야하는 데이터를 하나의 자료형으로 묶어주기
         // → Data binding (데이터 바인딩)
         MemberVO mvo = new MemberVO();
         mvo.setEmail(email);
         mvo.setPw(pw);
         mvo.setAddress(address);
         mvo.setTel(tel);

         // 3. 실제 DB에 해당하는 내용이 전달되도록 작업! → DAO 클래스 (예전 자바에서)
         MemberDAO dao = new MemberDAO();
         int row = dao.join(mvo);

         // 4. 회원가입 성공 했다면,
         if (row > 0) {
            // 4-1) request영역에 email 정보를 저장해서
            request.setAttribute("email", email);
            // 4-2) forward방식으로 join_success.jsp로 이동
            RequestDispatcher rd = request.getRequestDispatcher("join_success.jsp"); // 이동경로를 넘겨준다
            rd.forward(request, response); // 경로로 이동한다!! 암기하기
         } else {
            // 5. 회원가입 실패했다면
            // 5-1) main.jsp redirect방식으로 이동
            response.sendRedirect("main.jsp");
         }

      } else if (finalUri.equals("Login.do")) {
         // 로그인에 대한 기능 수행
         // 요청 인코딩 설정
         request.setCharacterEncoding("UTF-8");

         // 클라이언트가 보낸 값 받기
         String email = request.getParameter("email");
         String pw = request.getParameter("pw");

         // 하나의 자료형으로 만들어서 DB에 넘겨주기
         MemberVO mvo = new MemberVO();
         mvo.setEmail(email);
         mvo.setPw(pw);
         
         // DB에 값들이 전달되도록 작업하기
         MemberDAO dao = new MemberDAO();
         MemberVO info = dao.login(mvo);
         
         // 로그인 성공
         if (info != null) {
            HttpSession session = request.getSession();
            session.setAttribute("info", info);
            
            // 로그인 성공 후 다시 메인으로 이동
            response.sendRedirect("main.jsp");
      }
      }

   }

}
